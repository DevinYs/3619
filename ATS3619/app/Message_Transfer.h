// Message_Transfer.h

// type definition
typedef	signed char			(sint8);
typedef	unsigned char		(uint8);
typedef	signed short		(sint16);
typedef	unsigned short		(uint16);
typedef	signed long			(sint32);
typedef	unsigned long		(uint32);
typedef	signed long long	(sint64);
typedef	unsigned long long	(uint64);

enum MsgHeaderID
{	MSG_SOC2DSP,
	MSG_DSP2SOC,
	MSG_HEADER_ID = 0x2,

    MSG_HEADER_SOC2DSP = 0xe5,
    MSG_HEADER_DSP2SOC = 0xea,

	MSG_ACK  = 0x1,
	MSG_NACK = 0x0,
};

enum MsgCompanyID
{	// 0x0 ~ 0x7
	MSG_COMPANY_ACTIONS,
	MSG_COMPANY_MCSLOGIC,
	MSG_COMPANY_MASK = 0x7,
	MSG_COMPANY_MSB = 7,
	MSG_COMPANY_BITS = 3,
	MSG_COMPANY_LOCATOR = MSG_COMPANY_MSB - MSG_COMPANY_BITS + 1,
};

enum MsgProcessorID
{	// 0x0 ~ 0x7
	MSG_PROCESSOR_FLOAT,
	MSG_PROCESSOR_ARM,		MSG_PROCESSOR_ARM9 = MSG_PROCESSOR_ARM,		MSG_PROCESSOR_ARM32 = MSG_PROCESSOR_ARM,
	MSG_PROCESSOR_HIFI2,
	MSG_PROCESSOR_HIFI3,
	MSG_PROCESSOR_HIFI4,
	MSG_PROCESSOR_HIFI5,
	MSG_PROCESSOR_MASK = 0x7,
	MSG_PROCESSOR_MSB = 4,
	MSG_PROCESSOR_BITS = 3,
	MSG_PROCESSOR_LOCATOR = MSG_PROCESSOR_MSB - MSG_PROCESSOR_BITS + 1,
};

enum MsgBoardID
{	// 0x0 ~ 0x3
	MSG_BOARD0, MSG_BOARD_0 = MSG_BOARD0, MSG_BOARD_ID0 = MSG_BOARD0,
	MSG_BOARD1, MSG_BOARD_1 = MSG_BOARD1, MSG_BOARD_ID1 = MSG_BOARD1,
	MSG_BOARD2, MSG_BOARD_2 = MSG_BOARD2, MSG_BOARD_ID2 = MSG_BOARD2,
	MSG_BOARD3, MSG_BOARD_3 = MSG_BOARD3, MSG_BOARD_ID3 = MSG_BOARD3,
	MSG_BOARD_MASK = 0x3,
	MSG_BOARD_MSB = 1,
	MSG_BOARD_BITS = 2,
	MSG_BOARD_LOCATOR = MSG_BOARD_MSB - MSG_BOARD_BITS + 1,
};

enum MsgSizeMessage
{	MSG_SIZE_MESSAGE  = sizeof(uint8) * 256,

	MSG_SIZE_HEAD = sizeof(uint8),
	MSG_SIZE_CHIP = sizeof(uint8),
	MSG_SIZE_LENG = sizeof(uint8),
	MSG_SIZE_COMD = sizeof(uint8),
	MSG_SIZE_CSUM = sizeof(uint8),

	MSG_POS_HEAD = 0,
	MSG_POS_CHIP = MSG_SIZE_HEAD,
	MSG_POS_LENG = MSG_SIZE_HEAD + MSG_SIZE_CHIP,
	MSG_POS_COMD = MSG_SIZE_HEAD + MSG_SIZE_CHIP + MSG_SIZE_LENG,
	MSG_POS_DATA = MSG_SIZE_HEAD + MSG_SIZE_CHIP + MSG_SIZE_LENG + MSG_SIZE_COMD,

	MSG_OFS_LENG = MSG_SIZE_HEAD + MSG_SIZE_CHIP + MSG_SIZE_LENG,
};

enum MsgCommandID
{	// 0x00 ~ 0xff
	MSG_COMMAND_PROJECTID				= 0x00,//
	MSG_COMMAND_POWER_STATUS, //save
	MSG_COMMAND_FUNCTION,
	MSG_COMMAND_SAMPLERATE, //save
	MSG_COMMAND_JACK_STATUS, //save, gpio related
	MSG_COMMAND_SOUND_MODE,
	MSG_COMMAND_PASSTHRU, //gui

	MSG_COMMAND_VOLUME_MSTER			= 0x10,
	MSG_COMMAND_VOLUME_MUSIC,
	MSG_COMMAND_VOLUME_PHONE,
	MSG_COMMAND_MUTE_MSTER,
	MSG_COMMAND_MUTE_MUSIC,
	MSG_COMMAND_MUTE_PHONE,
	MSG_COMMAND_TRIM_MSTER,
	MSG_COMMAND_TRIM_MUSIC,
	MSG_COMMAND_TRIM_PHONE,

	MSG_COMMAND_PREQ_MODE				= 0x20,
	MSG_COMMAND_PREQ_SWITCH,
	MSG_COMMAND_PREQ_PARAMS,

	MSG_COMMAND_COMPRESSOR_SWITCH		= 0x30,
	MSG_COMMAND_COMPRESSOR_PARAMS,

	MSG_COMMAND_ECHO_SWITCH				= 0x40,
	MSG_COMMAND_ECHO_GAIN,
	MSG_COMMAND_ECHO_DELAY,
	MSG_COMMAND_ECHO_REPEAT,
	MSG_COMMAND_ECHO_HPF,
	MSG_COMMAND_ECHO_LPF,

	MSG_COMMAND_REVERB_SWITCH,
	MSG_COMMAND_REVERB_GAIN,
	MSG_COMMAND_REVERB_PREDELAY,
	MSG_COMMAND_REVERB_REPEAT,
	MSG_COMMAND_REVERB_HPF,
	MSG_COMMAND_REVERB_LPF,

	MSG_COMMAND_ECHO_REVERB_RATIO,
	MSG_COMMAND_ECHO_REVERB_LEVEL,

	MSG_COMMAND_FEEDBACKCANCEL_SWITCH	= 0x50,
	MSG_COMMAND_FEEDBACKCANCEL_LEVEL,
	MSG_COMMAND_VOCAL_EFFECT,

	MSG_COMMAND_ROOMCALIBRATION_MODE	= 0x60,
	MSG_COMMAND_ROOMCALIBRATION_START,
	MSG_COMMAND_ROOMCALIBRATION_SWITCH,
	MSG_COMMAND_ROOMCALIBRATION_DOWNLOAD,
	MSG_COMMAND_ROOMCALIBRATION_UPLOAD,
	MSG_COMMAND_ROOMCALIBRATION_STATUS,

	MSG_COMMAND_MEASUREMENT_MIC			= 0x70,
	MSG_COMMAND_MEASUREMENT_RMS,

	MSG_COMMAND_HANDSHAKE = 0xff,

	MSG_COMMAND_MASK = 0xff,
};

typedef struct
{
	uint8 mHeader[MSG_HEADER_ID];
	uint8 mChipset;
	uint8 mMessage[MSG_SIZE_MESSAGE];
	uint8 mPosition;
}dspMessage;
extern dspMessage DSP_Message;

void DSP_InitMessage(dspMessage* msg, uint8 company, uint8 processor, uint8 board);
void DSP_AppendMessage(dspMessage* msg, void* data, uint8 size);
void DSP_AppendHeader(dspMessage* msg, uint8 dir, uint8 cmd);
void DSP_AppendChkSum(dspMessage* msg);
uint8 DSP_CmdMapping(uint8 cmd_id);
